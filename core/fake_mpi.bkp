/******************************************************************************
 *                                                                            *
 * FAKE_MPI.C                                                                 *
 *                                                                            *
 * DUMMY INTERFACE FOR COMPILING W/O MPI SUPPORT                              *
 *                                                                            *
 ******************************************************************************/

#include "decs.h"

void mpi_initialization(int argc, char *argv[]) {
  int sdims[3] = {N1TOT, N2TOT, N3TOT};
  for (int d = 0; d < 3; d++) {
    global_start[d] = 0;
    global_stop[d] = sdims[d];
  }
}
void mpi_finalize() {}
// Gotta still handle periodic boundaries
int sync_mpi_bound_X1(struct FluidState *S) {
  if (X1L_BOUND == PERIODIC && X1R_BOUND == PERIODIC) {
#pragma omp parallel for collapse(2)
    KLOOP {
      JLOOP {
        ISLOOP(-NG, -1) {
          int iz = N1 + i;
          PLOOP S->P[ip][k][j][i] = S->P[ip][k][j][iz];
          pflag[k][j][i] = pflag[k][j][iz];
        }
      }
    }

#pragma omp parallel for collapse(2)
    KLOOP {
      JLOOP {
        ISLOOP(N1, N1 - 1 + NG) {
          int iz = i - N1;
          PLOOP S->P[ip][k][j][i] = S->P[ip][k][j][iz];
          pflag[k][j][i] = pflag[k][j][iz];
        }
      }
    }
  }
  return 0;
}
int sync_mpi_bound_X2(struct FluidState *S) {
  if (X2L_BOUND == PERIODIC && X2R_BOUND == PERIODIC) {
#pragma omp parallel for collapse(2)
    KLOOP {
      ILOOPALL {
        JSLOOP(-NG, -1) {
          int jz = N2 + j;
          PLOOP S->P[ip][k][j][i] = S->P[ip][k][jz][i];
          pflag[k][j][i] = pflag[k][jz][i];
        }
      }
    }
#pragma omp parallel for collapse(2)
    KLOOP {
      ILOOPALL {
        JSLOOP(N2, N2 - 1 + NG) {
          int jz = j - N2;
          PLOOP S->P[ip][k][j][i] = S->P[ip][k][jz][i];
          pflag[k][j][i] = pflag[k][jz][i];
        }
      }
    }
  }
  return 0;
}
int sync_mpi_bound_X3(struct FluidState *S) {
  if (X3L_BOUND == PERIODIC && X3R_BOUND == PERIODIC) {
#pragma omp parallel for collapse(2)
    JLOOPALL {
      ILOOPALL {
        KSLOOP(-NG, -1) {
          int kz = N3 + k;
          PLOOP S->P[ip][k][j][i] = S->P[ip][kz][j][i];
          pflag[k][j][i] = pflag[kz][j][i];
        }
      }
    }
#pragma omp parallel for collapse(2)
    JLOOPALL {
      ILOOPALL {
        KSLOOP(N3, N3 - 1 + NG) {
          int kz = k - N3;
          PLOOP S->P[ip][k][j][i] = S->P[ip][kz][j][i];
          pflag[k][j][i] = pflag[kz][j][i];
        }
      }
    }
  }
  return 0;
}
void mpi_barrier() {}
int mpi_nprocs() {return 1;}
int mpi_myrank() {return 1;}
double mpi_max(double f) {return f;}
double mpi_min(double f) {return f;}
double mpi_reduce(double f) {return f;}
int mpi_reduce_int(int f) {return f;}
void mpi_reduce_vector(double *vec_send, double *vec_recv, int len) {for (int i = 0; i < len; i++) vec_recv[i] = vec_send[i];}
int mpi_io_proc() {return 1;}
void mpi_int_broadcast(int *val) {}
void mpi_dbl_broadcast(double *val) {}

